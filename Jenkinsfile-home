def getPomVersion () {
    // read parent pom.xml for modules, groupId and version
	parentPom = readMavenPom file: "mdx-portal-test/pom.xml"
	return "parentPom.version"
}

pipeline {
    agent any

    parameters {
       string defaultValue: '1.2', 
              description: 'Release version from pom file.', 
              name: 'RELEASE_VERSION', 
              trim: true
    }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "Maven"
    }

    environment {
        GIT_CREDENTIALS = 'jello62-github'
        GIT_URL = 'https://github.com/jello62/mdx-repo.git'
        
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081"
        NEXUS_CREDENTIAL_ID = "nexus-cred"
        //NEXUS_SNAPSHOTS_REPOSITORY = "ISD4-mdx-mpt-snapshot"
        //NEXUS_RELEASES_REPOSITORY = "ISD4-mdx-mpt-release"
	    NEXUS_SNAPSHOTS_REPOSITORY = "maven-snapshots" // testing
        NEXUS_RELEASES_REPOSITORY = "maven-releases" // testing

	    CD_CONFIGURATION = "CD-DEV"
	    CD_PROJECT = "MDX-Deploy"  
        CD_PIPELINE = "MDX DEV0 - Deployment"    
	RELEASE_VERSION = ""
    }	
	
        stage('Build') {
            steps {
                dir('mdx-portal-test') {
                    bat 'mvn clean install'
                }
            }
        }
		
	/* ???
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
	*/
		
	/* ???
        stage ('sonar') {
            steps { 
	        script {
		    sh """ 
		        mvn clean install sonar:sonar -Dsonar.host.url=http://10.100.82.194:9000/ -Dsonar.login=admin -Dsonar.password=admin -Dsonar.projectName=jenkins-sample -Dsonar.projectKey=ISD4-MDX-DEV
	            """
		}
	    }
	}
	*/
		
        stage ('Artifact Upload') {
            steps { 
		// upload using pom.xml, one for each MDX artifact?
		script {
		    // read parent pom.xml for modules, groupId and version
		    parentPom = readMavenPom file: "mdx-portal-test/pom.xml"
		    RELEASE_VERSION = parentPom.version
				    
		    // set repository based on version in pom.xml
		    if (parentPom.version.contains("-SNAPSHOT")) {
                        nexusRepository = "${NEXUS_SNAPSHOTS_REPOSITORY}"
                    } else {
                        nexusRepository = "${NEXUS_RELEASES_REPOSITORY}"
                    }

		    // upload each module artifact using its pom.xml
                    parentPom.modules.each {
                        dir("mdx-portal-test/${it}") {
			    pom = readMavenPom file: "pom.xml";
                            filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                            echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                            artifactPath = filesByGlob[0].path;
                            artifactExists = fileExists artifactPath;
                            if(artifactExists) {
                                echo "*** File: ${artifactPath}, group: ${parentPom.groupId}, packaging: ${pom.packaging}, version ${parentPom.version}";
                                nexusArtifactUploader(
                                    nexusVersion: NEXUS_VERSION,
                                    protocol: NEXUS_PROTOCOL,
                                    nexusUrl: NEXUS_URL,
                                    groupId: parentPom.groupId,
                                    version: RELEASE_VERSION,
                                    repository: nexusRepository,
                                    credentialsId: NEXUS_CREDENTIAL_ID,
                                    artifacts: [
                                        [artifactId: pom.artifactId,
                                         classifier: '',
                                         file: artifactPath,
                                         type: pom.packaging],
                                        [artifactId: pom.artifactId,
                                         classifier: '',
                                         file: "pom.xml",
                                         type: "pom"]
                                    ]
                                );
                            } else {
                                error "*** File: ${artifactPath}, could not be found";
                            }
                        }
		    }
                }
	    }
        }
	
	/*
	// Call CD deployment pipeline.  
        stage('Deploy') { 
            steps {
                // Run deployment pipeline CloudBees CD. Catch error if it fails
                catchError(message: 'An error occurred during CD deployment.', stageResult: 'ABORTED') {
                    cloudBeesFlowRunPipeline configuration: "${CD_CONFIGURATION}", 
                                        runAndWaitOption: [checkInterval: 10, dependOnCdJobOutcome: true, throwExceptionIfFailed: true],
                                        pipelineName: "${CD_PIPELINE}", 
                                        projectName: "${CD_PROJECT}",
                                        addParam: '{"pipeline":{"pipelineName":"${CD_PIPELINE}","parameters":[{"parameterName":"releaseVersion","parameterValue":"${RELEASE_VERSION}"}]}}'
                }
            }
        }*/
    }
    
}
