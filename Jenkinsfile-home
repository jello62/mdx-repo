pipeline {
    agent any

    parameters {
       string defaultValue: "", description: 'Release version from pom file.', name: 'RELEASE_VERSION', trim: true
    }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "Maven"
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081"
        NEXUS_CREDENTIAL_ID = "nexus-cred"
	NEXUS_SNAPSHOTS_REPOSITORY = "maven-snapshots"
        NEXUS_RELEASES_REPOSITORY = "maven-releases"
    }	

    stages {
        stage('Build') {
            steps {
	        script {
	            // read parent pom.xml for modules, groupId and version
		    parentPom = readMavenPom file: "mdx-portal-test/pom.xml"
		    
		    if (parentPom.version == RELEASE_VERSION) {
		        dir('mdx-portal-test') {
                           bat 'mvn clean install'
                        }
		    } else {
		        error "RELEASE_VERSION parameter and pom.xml version do not match.  Please rerun pipeline with RELEASE_VERSION parameter set to \'${parentPom.version}\'";
		    }
		}
            }
        }
		
        stage ('Artifact Upload') {
            steps { 
		// upload using pom.xml, one for each MDX artifact?
		script {
		    // read parent pom.xml for modules, groupId and version
		    parentPom = readMavenPom file: "mdx-portal-test/pom.xml"
		    RELEASE_VERSION = parentPom.version
				    
		    // set repository based on version in pom.xml
		    if (parentPom.version.contains("-SNAPSHOT")) {
                        nexusRepository = "${NEXUS_SNAPSHOTS_REPOSITORY}"
                    } else {
                        nexusRepository = "${NEXUS_RELEASES_REPOSITORY}"
                    }

		    // upload each module artifact using its pom.xml
                    parentPom.modules.each {
                        dir("mdx-portal-test/${it}") {
			    pom = readMavenPom file: "pom.xml";
                            filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                            echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                            artifactPath = filesByGlob[0].path;
                            artifactExists = fileExists artifactPath;
                            if(artifactExists) {
                                echo "*** File: ${artifactPath}, group: ${parentPom.groupId}, packaging: ${pom.packaging}, version ${parentPom.version}";
                                nexusArtifactUploader(
                                    nexusVersion: NEXUS_VERSION,
                                    protocol: NEXUS_PROTOCOL,
                                    nexusUrl: NEXUS_URL,
                                    groupId: parentPom.groupId,
                                    version: RELEASE_VERSION,
                                    repository: nexusRepository,
                                    credentialsId: NEXUS_CREDENTIAL_ID,
                                    artifacts: [
                                        [artifactId: pom.artifactId,
                                         classifier: '',
                                         file: artifactPath,
                                         type: pom.packaging],
                                        [artifactId: pom.artifactId,
                                         classifier: '',
                                         file: "pom.xml",
                                         type: "pom"]
                                    ]
                                );
                            } else {
                                error "*** File: ${artifactPath}, could not be found";
                            }
                        }
		    }
                }
	    }
        }
	
	stage ('Deploy') {
	   steps {
	       echo "deploying ${RELEASE_VERSION}"
	   }
	}
    }  
}
